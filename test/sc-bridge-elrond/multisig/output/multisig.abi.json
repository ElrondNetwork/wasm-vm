{
    "docs": [
        "Multi-signature smart contract implementation.",
        "Acts like a wallet that needs multiple signers for any action performed."
    ],
    "name": "Multisig",
    "endpoints": [
        {
            "docs": [
                "Owner claims accumulated fees and distributes them to relayers",
                "Only centralized until we have a finalized fee distribution algorithm in place",
                "Not using get_owner API function, as the owner may also be a multisig SC"
            ],
            "name": "claimFees",
            "inputs": [
                {
                    "name": "dest_address",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "stake",
            "payableInTokens": [
                "EGLD"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "unstake",
            "inputs": [
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "getNextTransactionBatch",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                },
                {
                    "type": "variadic<multi<u64,u32,Address,EthAddress,TokenIdentifier,BigUint>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "proposeEsdtSafeSetCurrentTransactionBatchStatus",
            "inputs": [
                {
                    "name": "esdt_safe_batch_id",
                    "type": "u32"
                },
                {
                    "name": "tx_batch_status",
                    "type": "variadic<TransactionStatus>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "proposeMultiTransferEsdtBatch",
            "inputs": [
                {
                    "name": "batch_id",
                    "type": "u64"
                },
                {
                    "name": "transfers",
                    "type": "variadic<multi<Address,TokenIdentifier,BigUint>>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Proposers and board members use this to launch signed actions."
            ],
            "name": "performAction",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "optional<variadic<TransactionStatus>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getCurrentTxBatch",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                },
                {
                    "type": "variadic<multi<u64,u32,Address,EthAddress,TokenIdentifier,BigUint>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "isValidActionId",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "docs": [
                "Actions are cleared after execution, so an empty entry means the action was executed already",
                "Returns \"false\" if the action ID is invalid"
            ],
            "name": "wasActionExecuted",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "docs": [
                "If the mapping was made, it means that the transfer action was proposed in the past",
                "To check if it was executed as well, use the wasActionExecuted view"
            ],
            "name": "wasTransferActionProposed",
            "inputs": [
                {
                    "name": "batch_id",
                    "type": "u64"
                },
                {
                    "name": "transfers",
                    "type": "variadic<multi<Address,TokenIdentifier,BigUint>>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "getActionIdForTransferBatch",
            "inputs": [
                {
                    "name": "batch_id",
                    "type": "u64"
                },
                {
                    "name": "transfers",
                    "type": "variadic<multi<Address,TokenIdentifier,BigUint>>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "wasSetCurrentTransactionBatchStatusActionProposed",
            "inputs": [
                {
                    "name": "esdt_safe_batch_id",
                    "type": "u32"
                },
                {
                    "name": "expected_tx_batch_status",
                    "type": "variadic<TransactionStatus>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "getActionIdForSetCurrentTransactionBatchStatus",
            "inputs": [
                {
                    "name": "esdt_safe_batch_id",
                    "type": "u32"
                },
                {
                    "name": "expected_tx_batch_status",
                    "type": "variadic<TransactionStatus>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Used by board members to sign actions."
            ],
            "name": "sign",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Board members can withdraw their signatures if they no longer desire for the action to be executed.",
                "Actions that are left with no valid signatures can be then deleted to free up storage."
            ],
            "name": "unsign",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Clears storage pertaining to an action that is no longer supposed to be executed.",
                "Any signatures that the action received must first be removed, via `unsign`.",
                "Otherwise this endpoint would be prone to abuse."
            ],
            "name": "discardAction",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Initiates board member addition process.",
                "Can also be used to promote a proposer to board member."
            ],
            "name": "proposeAddBoardMember",
            "inputs": [
                {
                    "name": "board_member_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Initiates proposer addition process..",
                "Can also be used to demote a board member to proposer."
            ],
            "name": "proposeAddProposer",
            "inputs": [
                {
                    "name": "proposer_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Removes user regardless of whether it is a board member or proposer."
            ],
            "name": "proposeRemoveUser",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "proposeChangeQuorum",
            "inputs": [
                {
                    "name": "new_quorum",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "proposeSlashUser",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "deployChildContracts",
            "inputs": [
                {
                    "name": "egld_esdt_swap_code",
                    "type": "bytes"
                },
                {
                    "name": "multi_transfer_esdt_code",
                    "type": "bytes"
                },
                {
                    "name": "esdt_safe_code",
                    "type": "bytes"
                },
                {
                    "name": "price_aggregator_contract_address",
                    "type": "Address"
                },
                {
                    "name": "esdt_safe_eth_tx_gas_limit",
                    "type": "BigUint"
                },
                {
                    "name": "multi_transfer_esdt_eth_tx_gas_limit",
                    "type": "BigUint"
                },
                {
                    "name": "wrapped_egld_token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "wrapped_eth_token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_whitelist",
                    "type": "variadic<TokenIdentifier>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "upgradeChildContract",
            "inputs": [
                {
                    "name": "sc_address",
                    "type": "Address"
                },
                {
                    "name": "new_code",
                    "type": "bytes"
                },
                {
                    "name": "init_args",
                    "type": "variadic<bytes>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "pause",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "unpause",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "addMapping",
            "inputs": [
                {
                    "name": "erc20_address",
                    "type": "EthAddress"
                },
                {
                    "name": "token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": []
        },
        {
            "name": "changeFeeEstimatorContractAddress",
            "inputs": [
                {
                    "name": "new_address",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "changeDefaultCostPerGwei",
            "inputs": [
                {
                    "name": "token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "new_value",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "esdtSafeAddTokenToWhitelist",
            "inputs": [
                {
                    "name": "token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "opt_default_value_in_dollars",
                    "type": "optional<BigUint>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "esdtSafeRemoveTokenFromWhitelist",
            "inputs": [
                {
                    "name": "token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": []
        },
        {
            "name": "esdtSafeSetMaxTxBatchSize",
            "inputs": [
                {
                    "name": "new_max_tx_batch_size",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "name": "esdtSafeSetMinBlockNonceDiff",
            "inputs": [
                {
                    "name": "new_min_block_nonce_diff",
                    "type": "u64"
                }
            ],
            "outputs": []
        },
        {
            "name": "multiTransferEsdtaddTokenToWhitelist",
            "inputs": [
                {
                    "name": "token_id",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "opt_default_value_in_dollars",
                    "type": "optional<BigUint>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "multiTransferEsdtRemoveTokenFromWhitelist",
            "inputs": [
                {
                    "name": "token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Minimum number of signatures needed to perform any action."
            ],
            "name": "getQuorum",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Denormalized board member count.",
                "It is kept in sync with the user list by the contract."
            ],
            "name": "getNumBoardMembers",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Denormalized proposer count.",
                "It is kept in sync with the user list by the contract."
            ],
            "name": "getNumProposers",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "The required amount to stake for accepting relayer position"
            ],
            "name": "getRequiredStakeAmount",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Staked amount by each board member."
            ],
            "name": "getAmountStaked",
            "inputs": [
                {
                    "name": "board_member_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Amount of stake slashed if a relayer is misbehaving"
            ],
            "name": "getSlashAmount",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Total slashed tokens accumulated"
            ],
            "name": "getSlashedTokensAmount",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "isPaused",
            "inputs": [],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "docs": [
                "Mapping between ERC20 Ethereum address and Elrond ESDT Token Identifiers"
            ],
            "name": "getErc20AddressForTokenId",
            "inputs": [
                {
                    "name": "token_id",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": [
                {
                    "type": "EthAddress"
                }
            ]
        },
        {
            "name": "getTokenIdForErc20Address",
            "inputs": [
                {
                    "name": "erc20_address",
                    "type": "EthAddress"
                }
            ],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "getEgldEsdtSwapAddress",
            "inputs": [],
            "outputs": [
                {
                    "type": "Address"
                }
            ]
        },
        {
            "name": "getEsdtSafeAddress",
            "inputs": [],
            "outputs": [
                {
                    "type": "Address"
                }
            ]
        },
        {
            "name": "getMultiTransferEsdtAddress",
            "inputs": [],
            "outputs": [
                {
                    "type": "Address"
                }
            ]
        },
        {
            "docs": [
                "Iterates through all actions and retrieves those that are still pending.",
                "Serialized full action data:",
                "- the action id",
                "- the serialized action data",
                "- (number of signers followed by) list of signer addresses."
            ],
            "name": "getPendingActionFullInfo",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<ActionFullInfo>",
                    "multi_result": true
                }
            ]
        },
        {
            "docs": [
                "Returns `true` (`1`) if the user has signed the action.",
                "Does not check whether or not the user is still a board member and the signature valid."
            ],
            "name": "signed",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                },
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "docs": [
                "Indicates user rights.",
                "`0` = no rights,",
                "`1` = can propose, but not sign,",
                "`2` = can propose and sign."
            ],
            "name": "userRole",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "UserRole"
                }
            ]
        },
        {
            "docs": [
                "Lists all users that can sign actions."
            ],
            "name": "getAllBoardMembers",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<Address>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getAllStakedRelayers",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<Address>",
                    "multi_result": true
                }
            ]
        },
        {
            "docs": [
                "Lists all proposers that are not board members."
            ],
            "name": "getAllProposers",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<Address>",
                    "multi_result": true
                }
            ]
        },
        {
            "docs": [
                "Gets addresses of all users who signed an action.",
                "Does not check if those users are still board members or not,",
                "so the result may contain invalid signers."
            ],
            "name": "getActionSigners",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "List<Address>"
                }
            ]
        },
        {
            "docs": [
                "Gets addresses of all users who signed an action and are still board members.",
                "All these signatures are currently valid."
            ],
            "name": "getActionSignerCount",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "It is possible for board members to lose their role.",
                "They are not automatically removed from all actions when doing so,",
                "therefore the contract needs to re-check every time when actions are performed.",
                "This function is used to validate the signers before performing an action.",
                "It also makes it easy to check before performing an action."
            ],
            "name": "getActionValidSignerCount",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Returns `true` (`1`) if `getActionValidSignerCount >= getQuorum`."
            ],
            "name": "quorumReached",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "docs": [
                "The index of the last proposed action.",
                "0 means that no action was ever proposed yet."
            ],
            "name": "getActionLastIndex",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Serialized action data of an action with index."
            ],
            "name": "getActionData",
            "inputs": [
                {
                    "name": "action_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "Action"
                }
            ]
        }
    ],
    "types": {
        "Action": {
            "type": "enum",
            "variants": [
                {
                    "name": "Nothing",
                    "discriminant": 0
                },
                {
                    "name": "AddBoardMember",
                    "discriminant": 1,
                    "fields": [
                        {
                            "name": "0",
                            "type": "Address"
                        }
                    ]
                },
                {
                    "name": "AddProposer",
                    "discriminant": 2,
                    "fields": [
                        {
                            "name": "0",
                            "type": "Address"
                        }
                    ]
                },
                {
                    "name": "RemoveUser",
                    "discriminant": 3,
                    "fields": [
                        {
                            "name": "0",
                            "type": "Address"
                        }
                    ]
                },
                {
                    "name": "SlashUser",
                    "discriminant": 4,
                    "fields": [
                        {
                            "name": "0",
                            "type": "Address"
                        }
                    ]
                },
                {
                    "name": "ChangeQuorum",
                    "discriminant": 5,
                    "fields": [
                        {
                            "name": "0",
                            "type": "u32"
                        }
                    ]
                },
                {
                    "name": "SetCurrentTransactionBatchStatus",
                    "discriminant": 6,
                    "fields": [
                        {
                            "name": "esdt_safe_batch_id",
                            "type": "u32"
                        },
                        {
                            "name": "tx_batch_status",
                            "type": "List<TransactionStatus>"
                        }
                    ]
                },
                {
                    "name": "BatchTransferEsdtToken",
                    "discriminant": 7,
                    "fields": [
                        {
                            "name": "batch_id",
                            "type": "u64"
                        },
                        {
                            "name": "transfers",
                            "type": "List<tuple<Address,TokenIdentifier,BigUint>>"
                        }
                    ]
                }
            ]
        },
        "ActionFullInfo": {
            "type": "struct",
            "docs": [
                "Not used internally, just to retrieve results via endpoint."
            ],
            "fields": [
                {
                    "name": "action_id",
                    "type": "u32"
                },
                {
                    "name": "action_data",
                    "type": "Action"
                },
                {
                    "name": "signers",
                    "type": "List<Address>"
                }
            ]
        },
        "EthAddress": {
            "type": "struct",
            "fields": [
                {
                    "name": "0",
                    "type": "array20<u8>"
                }
            ]
        },
        "TransactionStatus": {
            "type": "enum",
            "variants": [
                {
                    "name": "None",
                    "discriminant": 0
                },
                {
                    "name": "Pending",
                    "discriminant": 1
                },
                {
                    "name": "InProgress",
                    "discriminant": 2
                },
                {
                    "name": "Executed",
                    "discriminant": 3
                },
                {
                    "name": "Rejected",
                    "discriminant": 4
                }
            ]
        },
        "UserRole": {
            "type": "enum",
            "variants": [
                {
                    "name": "None",
                    "discriminant": 0
                },
                {
                    "name": "Proposer",
                    "discriminant": 1
                },
                {
                    "name": "BoardMember",
                    "discriminant": 2
                }
            ]
        }
    }
}