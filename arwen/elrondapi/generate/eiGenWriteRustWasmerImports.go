package elrondapigenerate

import (
	"fmt"
	"os"
)

func WriteRustWasmerImports(out *os.File, eiMetadata *EIMetadata) {
	out.WriteString("// Code generated by elrondapi generator. DO NOT EDIT.\n\n")
	out.WriteString("// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
	out.WriteString("// !!!!!!!!!!!!!!!!!!!!!! AUTO-GENERATED FILE !!!!!!!!!!!!!!!!!!!!!!\n")
	out.WriteString("// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
	out.WriteString("\n")
	out.WriteString("use wasmer::{imports, Function, ImportObject, Store};\n\n")
	out.WriteString("use crate::wasmer_env_2::VMHooksWrapper;\n\n")

	for _, funcMetadata := range eiMetadata.AllFunctions {
		out.WriteString(fmt.Sprintf("fn %s(env: &VMHooksWrapper", adapter_function_name(funcMetadata.Name)))
		for _, arg := range funcMetadata.Arguments {
			out.WriteString(fmt.Sprintf(", %s: %s", snakeCase(arg.Name), rustType(arg.Type)))
		}
		out.WriteString(")")
		if funcMetadata.Result != nil {
			out.WriteString(fmt.Sprintf(" -> %s", rustType(funcMetadata.Result.Type)))
		}

		out.WriteString(" {\n")
		out.WriteString(fmt.Sprintf("    env.vm_hooks.%s(", snakeCase(funcMetadata.Name)))

		for i, arg := range funcMetadata.Arguments {
			if i > 0 {
				out.WriteString(", ")
			}
			out.WriteString(snakeCase(arg.Name))
		}

		out.WriteString(")\n}\n\n")
	}

	out.WriteString(`pub fn convert_imports_2(store: &Store, env: VMHooksWrapper) -> ImportObject {
    imports! {
        "env" => {
`)

	for _, funcMetadata := range eiMetadata.AllFunctions {
		out.WriteString(fmt.Sprintf(
			"            \"%s\" => Function::new_native_with_env(store, env.clone(), %s),\n",
			lowerInitial(funcMetadata.Name),
			adapter_function_name(funcMetadata.Name),
		))
	}

	out.WriteString(`
        }
    }
}
`)

}
