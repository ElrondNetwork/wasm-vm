package elrondapigenerate

import (
	"fmt"
	"os"
)

// WriteRustVMHooksPointers autogenerate data in the provided file
func WriteRustVMHooksPointers(out *os.File, eiMetadata *EIMetadata) {
	_, _ = out.WriteString(`// Code generated by elrondapi generator. DO NOT EDIT.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!! AUTO-GENERATED FILE !!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

use std::ffi::c_void;

#[repr(C)]
pub struct vm_exec_vm_hook_pointers {
    pub context_ptr: *mut c_void,`)

	for _, funcMetadata := range eiMetadata.AllFunctions {
		_, _ = out.WriteString(fmt.Sprintf(
			"\n    pub %s: extern \"C\" fn%s",
			cgoFuncPointerFieldName(funcMetadata),
			writeRustFnDeclarationArguments(
				"context: *mut c_void",
				funcMetadata,
			),
		))

		_, _ = out.WriteString(",")
	}

	_, _ = out.WriteString(`
}

#[rustfmt::skip]
impl elrond_exec_service::VMHooks for vm_exec_vm_hook_pointers {
`)

	for i, funcMetadata := range eiMetadata.AllFunctions {
		if i > 0 {
			_, _ = out.WriteString("\n")
		}

		_, _ = out.WriteString(fmt.Sprintf(
			"    fn %s%s {\n",
			snakeCase(funcMetadata.Name),
			writeRustFnDeclarationArguments(
				"&self",
				funcMetadata,
			),
		))

		_, _ = out.WriteString(fmt.Sprintf(
			"        (self.%s)%s\n",
			cgoFuncPointerFieldName(funcMetadata),
			writeRustFnCallArguments("self.context_ptr", funcMetadata),
		))

		_, _ = out.WriteString("    }\n")
	}

	_, _ = out.WriteString("}\n")
}
