package elrondapigenerate

import (
	"fmt"
	"os"
)

// WriteVMHooksWrapper autogenerate data in the provided file
func WriteVMHooksWrapper(out *os.File, eiMetadata *EIMetadata) {
	_, _ = out.WriteString(`package executorwrapper

// Code generated by elrondapi generator. DO NOT EDIT.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!! AUTO-GENERATED FILE !!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

import (
	"fmt"

	"github.com/ElrondNetwork/wasm-vm/executor"
)

// WrapperVMHooks wraps a VMHooks instance and optionally performs some logging.
type WrapperVMHooks struct {
	logger         ExecutorLogger
	wrappedVMHooks executor.VMHooks
}
`)

	for _, funcMetadata := range eiMetadata.AllFunctions {
		_, _ = out.WriteString(fmt.Sprintf("\n// %s VM hook wrapper", upperInitial(funcMetadata.Name)))
		_, _ = out.WriteString(fmt.Sprintf("\nfunc (w *WrapperVMHooks) %s(", upperInitial(funcMetadata.Name)))
		for argIndex, arg := range funcMetadata.Arguments {
			if argIndex > 0 {
				_, _ = out.WriteString(", ")
			}
			_, _ = out.WriteString(fmt.Sprintf("%s %s", arg.Name, arg.Type))
		}
		_, _ = out.WriteString(")")
		if funcMetadata.Result != nil {
			_, _ = out.WriteString(fmt.Sprintf(" %s", funcMetadata.Result.Type))
		}
		_, _ = out.WriteString(" {")
		writeCallInfo(out, funcMetadata)
		_, _ = out.WriteString("\n\tw.logger.LogVMHookCallBefore(callInfo)")
		_, _ = out.WriteString("\n\t")
		if funcMetadata.Result != nil {
			_, _ = out.WriteString("result := ")
		}
		_, _ = out.WriteString(fmt.Sprintf("w.wrappedVMHooks.%s(", upperInitial(funcMetadata.Name)))
		writeCommaSeparatedArgumentNames(out, funcMetadata.Arguments)
		_, _ = out.WriteString(")")
		_, _ = out.WriteString("\n\tw.logger.LogVMHookCallAfter(callInfo)")
		if funcMetadata.Result != nil {
			_, _ = out.WriteString("\n\treturn result")
		}
		_, _ = out.WriteString("\n}\n")
	}
}

func writeCallInfo(out *os.File, funcMetadata *EIFunction) {
	if len(funcMetadata.Arguments) == 0 {
		_, _ = out.WriteString(fmt.Sprintf("\n\tcallInfo := \"%s()\"", upperInitial(funcMetadata.Name)))
	} else {
		_, _ = out.WriteString(fmt.Sprintf("\n\tcallInfo := fmt.Sprintf(\"%s(", upperInitial(funcMetadata.Name)))
		for argIndex := range funcMetadata.Arguments {
			if argIndex > 0 {
				_, _ = out.WriteString(", ")
			}
			_, _ = out.WriteString("%d")
		}
		_, _ = out.WriteString(")\", ")
		writeCommaSeparatedArgumentNames(out, funcMetadata.Arguments)
		_, _ = out.WriteString(")")
	}
}

func writeCommaSeparatedArgumentNames(out *os.File, arguments []*EIFunctionArg) {
	for argIndex, arg := range arguments {
		if argIndex > 0 {
			_, _ = out.WriteString(", ")
		}
		_, _ = out.WriteString(fmt.Sprintf("%s", arg.Name))
	}
}
