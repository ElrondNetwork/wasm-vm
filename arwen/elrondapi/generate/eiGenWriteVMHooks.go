package elrondapigenerate

import (
	"fmt"
	"os"
)

func eiGroupInterfaceName(group *EIGroup) string {
	return fmt.Sprintf("%sVMHooks", group.Name)
}

// WriteEIInterface autogenerate data in the provided file
func WriteEIInterface(out *os.File, eiMetadata *EIMetadata) {
	_, _ = out.WriteString(`package executor

// Code generated by elrondapi generator. DO NOT EDIT.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!! AUTO-GENERATED FILE !!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// VMHooks contains all VM functions that can be called by the executor during SC execution.
type VMHooks interface {`)

	for _, group := range eiMetadata.Groups {
		_, _ = out.WriteString(fmt.Sprintf("\n\t%s", eiGroupInterfaceName(group)))
	}

	_, _ = out.WriteString("\n}\n")

	for _, group := range eiMetadata.Groups {
		_, _ = out.WriteString(fmt.Sprintf("\ntype %s interface {\n", eiGroupInterfaceName(group)))

		for _, funcMetadata := range group.Functions {
			_, _ = out.WriteString(fmt.Sprintf("\t%s(", upperInitial(funcMetadata.Name)))
			for argIndex, arg := range funcMetadata.Arguments {
				if argIndex > 0 {
					_, _ = out.WriteString(", ")
				}
				_, _ = out.WriteString(fmt.Sprintf("%s %s", arg.Name, arg.Type))
			}
			_, _ = out.WriteString(")")
			if funcMetadata.Result != nil {
				_, _ = out.WriteString(fmt.Sprintf(" %s", funcMetadata.Result.Type))
			}

			_, _ = out.WriteString("\n")
		}

		_, _ = out.WriteString("}\n")
	}

}

func externResult(functResult *EIFunctionResult) string {
	if functResult == nil {
		return "void"
	}
	return cgoType(functResult.Type)
}
